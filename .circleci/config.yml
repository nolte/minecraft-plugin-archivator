# CircleCI 2.0 configuration file,
# for handle the Release Process, used GitHub and the maven gitflow plugin
#
version: 2

defaults: &defaults
  working_directory: /tmp

aliases:
  # Variables.
  # For YAML support of anchors and references, @see http://blog.daemonl.com/2016/02/yaml.html

  # SSH Deployment key for github Pushing,
  - &deploy_ssh_fingerprint "2a:3b:9b:1d:ff:0c:ce:c3:28:8e:5e:74:07:fa:fe:3c"

  # @see https://github.com/aktau/github-release
  # Used container for handle github release actions
  - &container_releasemanager
    docker:
      - image: circleci/golang:1.8

  # @see https://circleci.com/docs/2.0/language-java/
  # define the default java build environment
  - &container_mavenbuild
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m


  # add the GitHub Deployment Key to the ssh-agent
  # @see https://circleci.com/docs/2.0/add-ssh-key/
  - &run_task_add_key
    add_ssh_keys:
      fingerprints:
        - *deploy_ssh_fingerprint

  # @see https://stedolan.github.io/jq/
  # used for better JSon Command Line parsing.
  - &run_task_prepare_jq
    run:
      name: "install jq to path"
      command: |
        sudo wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /usr/bin/jq
        sudo chmod +x /usr/bin/jq

  # Load the latest GitHub Release
  # Reuqired jq in the path
  # @see https://developer.github.com/v3/repos/releases/#get-the-latest-release
  - &run_task_load_latest_ghrelease
    run:
      name: "Load the Latest GH Release"
      command: |
        LAST_VERSION="$(curl https://${GITHUB_TOKEN}@api.github.com/repos/nolte/minecraft-plugin-archivator/releases/latest | jq -r '.tag_name' )"
        echo $LAST_VERSION > /tmp/workspace/last_release.txt

  # Load one version behind the latest GitHub Release
  # Reuqired jq in the path
  # @see https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository
  - &run_task_load_previous_ghrelease
    run: |
      PREVIOUS_VERSION="$(curl https://${GITHUB_TOKEN}@api.github.com/repos/nolte/minecraft-plugin-archivator/releases | jq -r '.[1].tag_name' )"
      echo $PREVIOUS_VERSION > /tmp/workspace/previous_release.txt

  - &run_task_configure_git
    run: |
      git config --global user.email "$GIT_AUTHOR_EMAIL"
      git config --global user.name "$GIT_AUTHOR_NAME"

  - &run_task_mvn_extract_version_from_pom
    run: |
      MVN_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      mkdir -p /tmp/workspace/
      echo $MVN_VERSION > /tmp/workspace/current_version.txt


jobs:

  finish-release:
    <<: *container_mavenbuild
    steps:
      - *run_task_add_key

      - checkout

      - *run_task_configure_git

      - run: mvn -B gitflow:release-finish -DpushRemote=true -DallowSnapshots=true

  start-release:
    <<: *container_mavenbuild
    steps:

      - attach_workspace:
          at: /tmp/workspace

      - *run_task_add_key

      - checkout

      - *run_task_configure_git

      - run: mvn -B gitflow:release-start -DpushRemote=true -DallowSnapshots=true


  generate-changelog:
    machine: true
    working_directory: /tmp/workspace
    steps:
      - *run_task_prepare_jq
      - *run_task_load_latest_ghrelease
      - run: |
          LAST_VERSION="$(cat /tmp/workspace/last_release.txt)"
          docker run -it --rm -v "$(pwd)":/usr/local/src/your-app ferrarimarco/github-changelog-generator:1.15.0.pre.beta --user nolte --project minecraft-plugin-archivator --token ${GITHUB_TOKEN} --since-tag $LAST_VERSION

      - store_artifacts:
          path: /tmp/workspace

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
              - CHANGELOG.md


  publish-github-release:
    <<: *container_releasemanager
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: "Publish the jar on GitHub"
          command: |
            go get github.com/aktau/github-release
            current_version="$(cat /tmp/workspace/current_version.txt)"
            github-release upload \
              --user ${CIRCLE_PROJECT_USERNAME} \
              --repo ${CIRCLE_PROJECT_REPONAME} \
              --tag "${current_version}" \
              --name "minecraft-archivator-v${current_version}.jar" \
              --file /tmp/workspace/buildArtefacts/minecraft-backup-archiver-${current_version}-shaded.jar

  releaseplayground:
    <<: *container_releasemanager
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/aktau/github-release
            message="$(cat /tmp/workspace/CHANGELOG.md)"
            current_version="$(cat /tmp/workspace/current_version.txt)"

            github-release release \
              --user ${CIRCLE_PROJECT_USERNAME} \
              --repo ${CIRCLE_PROJECT_REPONAME} \
              --name "v${current_version}" \
              --description "${message}" \
              --tag "${current_version}" \
              --draft


  build:
    <<: *container_mavenbuild
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn integration-test

      - *run_task_mvn_extract_version_from_pom

      - run:
          name: Save test results
          command: |
            mkdir -p /tmp/workspace/buildArtefacts/
            find . -type f -regex ".*/target/.*-shaded.jar" -exec cp {} /tmp/workspace/buildArtefacts/ \;
          when: always

      - store_artifacts:
          path: /tmp/workspace/buildArtefacts

      - store_artifacts:
          path: /tmp/workspace/current_version.txt

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
              - buildArtefacts
              - current_version.txt

      - run:
          name: Save test results
          command: |
            mkdir -p /tmp/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} /tmp/junit/ \;
          when: always

      - store_test_results:
          path: /tmp/junit

workflows:
  version: 2
#  staticfilesgeneration:
#    jobs:
#      - generate-changelog
#
  development-build:
    jobs:

      - generate-changelog:
          filters:
            branches:
              only: /develop/

      - build:
          filters:
            branches:
              only: /develop/

      - hold:
          type: approval
          requires:
            - build

      - start-release:
          requires:
            - hold



  release-build:
    jobs:

      - build:
          filters:
            branches:
              only: /release.*/

      - generate-changelog:
          filters:
            branches:
              only: /release.*/

      - releaseplayground:
          requires:
            - generate-changelog
            - build

      - publish-github-release:
          requires:
            - releaseplayground

      - finish-release:
          requires:
            - publish-github-release

  release-finished-build:
    jobs:
      - build:
          filters:
            branches:
              only: /master/
